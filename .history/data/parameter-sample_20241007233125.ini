# filename: parameter.ini
# coding: utf-8

[user]


; headless      bool      是否开启无头模式，开启无头模式时不会有浏览器前端界面;【倒计时模式】下，请设置为False，否则无法输入手机令牌信息;【刷新模式】下，可根据需要设置是否无头
; gap_click_tip bool      是否自动跳过点击框
; auto_login    bool      是否自动登陆;【刷新模式】下，务必设置为自动登陆
; student_id    string    学号
; password      string    密码


headless = False
gap_click_tip = False
auto_login = True

student_id = 21xxxxxxxx
password = xxxxxxx

[mode]
; mode                        str       模式选择，可选值为 "countdown" 或 "refresh_forever",分别代表【倒计时模式】和【刷新模式】
; ===============================================================================================
;|                                      模式说明
;|  countdown即【倒计时模式】
;|  适用于在指定的名额开放时间迅速抢名额的情况。
;|      具体流程:
;|      ......
;|
;|  refresh_forever即【刷新模式】，
;|  适用于名额不定时开放，通过不断刷新并访问页面，检测名额数量，并在有剩余名额时通过邮箱通知用户
;|  (由于时间的不确定性和手机令牌的限制，暂不考虑完全的自动刷新+抢名额)
;|      具体流程:
;|      ......
;|
;|
; ===============================================================================================


chosen_mode             = refresh_forever

[wait_time]
; wait_sleep_time              float     【倒计时模式】等待到达指定时间的睡眠时间，单位 s(通过不断更新控制台，证明代码还活着)
; begin_time                   str(HH:MM)【倒计时模式】正式开始访问页面、填写信息的时间【2024年国庆，保卫部将定时释放名额改为早上八点】
; simulate_once                bool      【倒计时模式】是否在正式预约之前，模拟填写第一个用户的信息，以熟悉程序预约流程
; refresh_checkDates_interval  float     【刷新模式】每两个日期之间监测的暂停时间，单位 s
; refresh_checkAgain_interval  float     【刷新模式】每次监测任务完成后的暂停时间，单位 s
; random_deviation             float     【同时用于两种模式】sleep时的偏移量分数，如果设置为 <= 0 的值，则视为 0
;
;
;
; 关于【刷新模式】下刷新间隔的配置示例:
;
; refresh_checkDates_interval = 4
; refresh_checkAgain_interval = 8
; random_deviation = 0.2
;
; 假设【刷新模式】程序运行时间为7月20日，监测日期包括7月20日、7月21日
; 则每个监测loop中7月20日与监测7月21日的间隔时间为 4 * (1.0 ± 0.2) s
; 各个监测loop之间的间隔时间为 8 * (1.0 ± 0.2) s


wait_sleep_time         = 20
begin_time              = 08:00
simulate_once           = True
refresh_checkdates_interval = 4
refresh_checkagain_interval = 8
random_deviation        = 0.2

;---------------- countdown模式专用参数 ----------------;
; 模式结构定义：
;
; [person${id}]      ; 用户为该预约人定义的 id
;
; person_name 		str          姓名
; person_idnumber 	str          18位身份证号
; person_phone 		str          11位手机号
; person_reason 	str          入校理由                    （例如参观学校）
; person_date 		str          入校日期在执行预约操作时的下拉框中是第几天  （第一天/第二天/第三天，代码自动识别为页面下拉框中的对应选项，故一般为第三天）
; person_time 		str(HH:MM)   入校时间                    （08:00-20:00中任意整点或半点）
; person_gate 		str          入校校门                    （东侧门/东南门/...，在一些节假日保卫部会限制可预约的校门，请以系统中可预约的校门为准）
;
;
; 例如：
;
; [person1]
;
; person_name = 闫军尧
; person_idnumber = 411082198510016079
; person_phone = 17632176581
; person_reason = 参观学校
; person_date = 第三天
; person_time = 15:00
; person_gate = 东侧门
;
;
;
; [person2]
; ...
; [person_alex]
; ...
; [person_my_parent]
; ...
; 请自行添加
;
;
;
;
;
; 注意：
;
; 1. 每个预约人的预约会自动填写所有信息，然后停止在输入手机令牌的步骤等待用户手动操作，可在模拟运行模式中熟悉操作步骤
; 2. 该文件中被预约人的优先级按照从上到下的顺序从高到低排序，如果在同一循环中有多个名额可预约，会从上到下依次提交预约请求，
;      高优先级的人会先被预约

[person1]


person_name = 闫军尧
person_idnumber = 411082198510016079
person_phone = 17632176581
person_reason = 参观学校
person_date = 第三天
person_time = 15:00
person_gate = 东侧门


[person2]

person_name = 王少娟
person_idnumber = 410185198207100060
person_phone = 17632176581
person_reason = 参观学校
person_date = 第三天
person_time = 15:00
person_gate = 东侧门


;---------------- refresh_forever模式专用参数 ----------------;
; 由email和recipient两部构成，实现名额开放的实时邮件通知功能，若无需实时通知，请将[email]中的intime_form设置为False
;
;
;---------------- email ----------------;
;自动发送邮件功能的原理是Python能通过SMTP协议发送简单邮件(参见https://blog.csdn.net/fenglepeng/article/details/107005000)，故只需在qq邮箱、163邮箱及其它邮箱中开启SMTP服务并获取相关参数即可(参考https://blog.csdn.net/hao_13/article/details/132818286、https://zhuanlan.zhihu.com/p/318387004)，笔者使用的是qq邮箱服务，并修改默认发件人后缀为foxmail，实现了“匿名化”的邮件发送。
;
;
;
;
;[email]      ; email模块名称，不得自定义;
;
; intime_inform    bool             是否使用邮箱实时通知名额情况
; sender_email     string           发送者邮箱地址
; sender_password  string           发送者邮箱smtp
; smtp_server      string           SMTP服务器地址
; smtp_port        int              SMTP服务器端口
;
;
;
;
;
;---------------- recipient ----------------;
;邮件收件邮箱及其订阅的日期，每个收件人各自设置，其订阅的日期有名额时，按照前后顺序依次通知;某日期通知完毕后，不会再监测、通知该日期的情况。
;
;
; [recipient_${id}] ; 用户为该收件人定义的 id

; recipient_email       string      该收件人的邮箱地址
; inform_update         string      该收件人需获取的放名额更新邮件通知的所有日期，日期为在执行操作时的下拉框中是第几天  （第一天/第二天/第三天，代码自动识别为页面下拉框中的对应选项）
;
;
;
; 例如：
;
;样例一：
;[email]
;
; intime_inform = True
; sender_email = lambda1@foxmail.com
; sender_password = xxxxxxx
; smtp_server = smtp.qq.com
; smtp_port = 587
;
;
; [recipient_1]
;
; recipient_email     = 21000166xx@stu.pku.edu.cn
; inform_update       =  第一天 第三天
;
; [recipient_2]
;
; recipient_email     = 23012xxxxx@pku.edu.cn
; inform_update       =  第一天 第二天
;
;
;
;样例二：
;[email]
;
; intime_inform = False
;
;
;

; 对于样例一，假设代码运行日期为7月20日，代码会提取两位收件人的需通知日期，监测7月20日、7月21日、7月22日三天的名额释放情况。当7月20日名额被随机释放时，会先后通知1、2两位收件人；7月21日名额释放时，只会通知1号收件人。
;
; 对于样例二，假设代码运行日期为7月20日，代码会监测7月20日、7月21日、7月22日三天的名额释放情况。若有名额释放，会在命令行中提示，但不会进行邮件通知。





[email]

intime_inform = True
sender_email = lambda1@foxmail.com
sender_password = xxxxxxx
smtp_server = smtp.qq.com
smtp_port = 587


[recipient_3]

recipient_email     = 2635203194@qq.com
inform_update       =  第一天 第二天 第三天